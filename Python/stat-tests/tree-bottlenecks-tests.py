#!/bin/env python

from CoaSim import *
from CoaSim.popStructure import \
     Population as P, \
     Sample as S, \
     Bottleneck as B

# this test is just a regression test -- I compare the simulated mean
# with previously simulated min and max

startValues = (0,0.5)
endValues   = (2,5,None)
fractions   = (0.1,0.5,2)
ns          = (5,10,20)
noSamples = 1000

# simulated data...
minMaxHTable = {(0.5, None, 0.5, 20): (0.35712527968917274, 3.6366291573307006), (0.5, 5, 0.5, 10): (0.15805152792384686, 4.7619831413803375), (0, 2, 0.5, 10): (0.14977068464773841, 6.8103104062944011), (0, 2, 2, 5): (0.32513843505652346, 8.6753087692598641), (0, 2, 2, 10): (0.54059317126195561, 12.321816854112631), (0, 2, 0.5, 5): (0.056850382874356641, 6.9744297533714095), (0.5, None, 0.5, 5): (0.073653790982045497, 3.6764250620525014), (0, 5, 2, 20): (0.61622294608841721, 11.933837806865784), (0, 5, 2, 10): (0.44066327127003696, 12.317851453691834), (0.5, None, 0.10000000000000001, 5): (0.10420345830356595, 1.5785705575421665), (0, 2, 2, 20): (0.72015625475907152, 9.6143361138600234), (0.5, 2, 0.10000000000000001, 5): (0.11610647011045344, 1.2897198919204329), (0.5, 2, 0.5, 10): (0.21318844154515471, 5.1461929966053628), (0, 2, 0.5, 20): (0.14515811009130433, 7.0783956234845471), (0.5, 2, 0.5, 20): (0.32898174204426556, 8.990981488193885), (0, 5, 2, 5): (0.1747236732358354, 8.7709074727073908), (0.5, 2, 2, 5): (0.084533434025342344, 8.5264356245528319), (0.5, 5, 2, 5): (0.099832855472145737, 8.7435008200741962), (0, 5, 0.5, 5): (0.08034438185897412, 4.3035022787933093), (0.5, None, 2, 20): (0.42334759490030388, 15.369072512805742), (0, 5, 0.5, 10): (0.1401220103660418, 4.8990613305327475), (0.5, 5, 0.10000000000000001, 5): (0.1040127535127444, 1.2548771867849733), (0.5, None, 2, 10): (0.19733245330332924, 18.313255458385342), (0.5, 2, 0.10000000000000001, 20): (0.28102339354221934, 1.4474104853834129), (0, 5, 0.5, 20): (0.19472457984992417, 4.6295134471244861), (0.5, 2, 2, 10): (0.22572585712401061, 6.8666334989258209), (0.5, 5, 0.5, 20): (0.29396480143840603, 4.7188068734235316), (0, None, 0.5, 20): (0.17863099494413126, 4.2497004513757464), (0.5, 5, 0.5, 5): (0.11433861963825293, 4.3810582787612695), (0, None, 0.10000000000000001, 5): (0.010301916176978176, 0.73897540266202777), (0, None, 2, 20): (0.74370735608240057, 16.719780342882576), (0, 2, 0.10000000000000001, 20): (0.042554653711588966, 1.0889369732206204), (0.5, None, 0.10000000000000001, 10): (0.2676150893257106, 1.1941321061154397), (0, None, 0.10000000000000001, 10): (0.033463190714552234, 0.88174415651829541), (0, None, 0.5, 5): (0.041650279782074529, 3.7464823526235524), (0, None, 0.10000000000000001, 20): (0.035904553622562924, 0.73707138286587137), (0.5, 5, 0.10000000000000001, 20): (0.23851033895883222, 1.2302299075737653), (0, 2, 0.10000000000000001, 10): (0.021817918584060802, 0.71229620605524158), (0, None, 2, 5): (0.17314142850401143, 16.074067712473148), (0, None, 2, 10): (0.24887670558966687, 16.890662447287554), (0, 2, 0.10000000000000001, 5): (0.012792652980896732, 0.76547656462916613), (0.5, 5, 2, 20): (0.3948361628439937, 10.751189697680637), (0.5, None, 0.5, 10): (0.25359312688360114, 3.8381601992985948), (0, None, 0.5, 10): (0.12652215410227199, 4.7525003086107818), (0, 5, 0.10000000000000001, 20): (0.028772132164114284, 1.0193056948694015), (0.5, None, 2, 5): (0.18134587117142656, 15.21393286464683), (0.5, 5, 2, 10): (0.23547232308616189, 13.488223717640942), (0.5, None, 0.10000000000000001, 20): (0.31865755009028918, 1.3936613840705296), (0.5, 5, 0.10000000000000001, 10): (0.29796905109744942, 1.2035849883212719), (0, 5, 0.10000000000000001, 5): (0.0085450096384900812, 0.77820315899070513), (0.5, 2, 2, 20): (0.32162180655548994, 9.421077779609476), (0.5, 2, 0.5, 5): (0.080290731418830058, 5.5835554930696309), (0.5, 2, 0.10000000000000001, 10): (0.21583209251927588, 1.2596734383251744), (0, 5, 0.10000000000000001, 10): (0.030300428195276698, 0.77390758753671773)}

minMaxBLTable = {(0.5, None, 0.5, 20): (1.9600737326930522, 10.800698398699874), (0.5, 5, 0.5, 10): (1.0050542916273701, 12.537934839887386), (0, 2, 0.5, 10): (0.73321337861620539, 15.456964848740249), (0, 2, 2, 5): (0.99112248420976745, 22.302741771244595), (0, 2, 2, 10): (2.5978517929155562, 29.042144292456946), (0, 2, 0.5, 5): (0.19400132463816833, 15.449782163224441), (0.5, None, 0.5, 5): (0.24120718029580429, 8.7806015743875179), (0, 5, 2, 20): (5.0281972120872815, 30.159501554868342), (0, 5, 2, 10): (2.2470951951162923, 30.96500771835623), (0.5, None, 0.10000000000000001, 5): (0.35881712007294775, 3.979126126178588), (0, 2, 2, 20): (4.148553118281427, 25.347353791624638), (0.5, 2, 0.10000000000000001, 5): (0.37415942021840154, 3.8334815031909248), (0.5, 2, 0.5, 10): (1.0681671552907146, 13.609327526905298), (0, 2, 0.5, 20): (1.0768857901551923, 16.033352311127654), (0.5, 2, 0.5, 20): (2.2901081540308015, 20.857183414019332), (0, 5, 2, 5): (0.5052571783916201, 23.560503291516262), (0.5, 2, 2, 5): (0.29466776383511306, 19.498471234379053), (0.5, 5, 2, 5): (0.33714232668084082, 22.039571217648284), (0, 5, 0.5, 5): (0.18573541189539045, 9.2105182682962159), (0.5, None, 2, 20): (2.7970912208858283, 34.331345829840636), (0, 5, 0.5, 10): (0.63033430819106628, 10.894718401767228), (0.5, 5, 0.10000000000000001, 5): (0.30958106296852356, 3.8255228468059017), (0.5, None, 2, 10): (1.3142665078255946, 38.750223995578253), (0.5, 2, 0.10000000000000001, 20): (2.1544125946963124, 5.745233597228478), (0, 5, 0.5, 20): (1.3039469258533698, 10.427707894215999), (0.5, 2, 2, 10): (1.1921096767810917, 17.250182907402664), (0.5, 5, 0.5, 20): (1.9543706160171739, 11.937648759687525), (0, None, 0.5, 20): (1.2670070203443993, 11.241787803486897), (0.5, 5, 0.5, 5): (0.38793551256822595, 10.724900614585099), (0, None, 0.10000000000000001, 5): (0.026574138501573755, 1.5360332474222604), (0, None, 2, 20): (5.1842694970189092, 40.253044908154607), (0, 2, 0.10000000000000001, 20): (0.2740961043689375, 2.4951201205039042), (0.5, None, 0.10000000000000001, 10): (1.3039845273476423, 5.1871489379867892), (0, None, 0.10000000000000001, 10): (0.14946543269374507, 1.9204868991746946), (0, None, 0.5, 5): (0.152361665952298, 7.803957759494395), (0, None, 0.10000000000000001, 20): (0.22185903784912522, 2.1028852380614165), (0.5, 5, 0.10000000000000001, 20): (2.0566213345012128, 5.9426658639646375), (0, 2, 0.10000000000000001, 10): (0.11294840365819238, 1.6792373906455638), (0, None, 2, 5): (0.67169849953454519, 34.339232460460195), (0, None, 2, 10): (1.1642087559444469, 41.063545136730696), (0, 2, 0.10000000000000001, 5): (0.039940855514926862, 1.6816451026529822), (0.5, 5, 2, 20): (2.1358734730988784, 25.020968474746581), (0.5, None, 0.5, 10): (1.2078517796908597, 10.499245767164693), (0, None, 0.5, 10): (0.71980510283379129, 10.348557055943894), (0, 5, 0.10000000000000001, 20): (0.21860365700161946, 2.4622537124195794), (0.5, None, 2, 5): (0.50157015545433337, 33.481525368657856), (0.5, 5, 2, 10): (0.8934114643920249, 32.54869755613435), (0.5, None, 0.10000000000000001, 20): (2.2634959274063067, 6.3311525886062938), (0.5, 5, 0.10000000000000001, 10): (1.3875345849880674, 4.5859245122823351), (0, 5, 0.10000000000000001, 5): (0.025535744114578537, 1.7061764438210707), (0.5, 2, 2, 20): (2.2349923405781218, 23.021456620588701), (0.5, 2, 0.5, 5): (0.22381421128008669, 12.755131816329794), (0.5, 2, 0.10000000000000001, 10): (1.1091901345148631, 4.5198253958337826), (0, 5, 0.10000000000000001, 10): (0.12674189930586829, 1.9340520710039226)}



def sample(n, start, end, f):
    minH  = 10000 ; maxH  = -1
    minBL = 10000 ; maxBL = -1
    heights = [] ; lengths = []
    for i in xrange(noSamples):
        arg = simulate([],P(1,S(n),epochs=[B(f,start,end)]),
                       keepEmptyIntervals=True)
        tree = arg.intervals[0].tree
        heights.append(tree.height)
        lengths.append(tree.branchLength)
        if minH > tree.height: minH = tree.height
        if maxH < tree.height: maxH = tree.height
        if minBL > tree.branchLength: minBL = tree.branchLength
        if maxBL < tree.branchLength: maxBL = tree.branchLength
    meanH = sum(heights)/noSamples
    meanBL = sum(lengths)/noSamples
    return minH, meanH, maxH, minBL, meanBL, maxBL


import sys
if len(sys.argv) >= 2 and sys.argv[1] == '--sample':
    minMaxHTable = dict()
    minMaxBLTable = dict()
    for start in startValues:
        for end in endValues:
            for f in fractions:
                for n in ns:
                    minH, _, maxH, minBL, _, maxBL = sample(n,start,end,f)
                    minMaxHTable[(start,end,f,n)] = minH,maxH
                    minMaxBLTable[(start,end,f,n)] = minBL,maxBL
    print >> open('minMaxHTable.py','w'), 'minMaxHTable =', minMaxHTable
    print >> open('minMaxBLTable.py','w'), 'minMaxBLTable =', minMaxBLTable

else:


    noErrors = 0
    def error(s):
        global noErrors
        print s
        noErrors += 1

    # the test...
    for start in startValues:
        for end in endValues:
            for f in fractions:
                for n in ns:
                    _, meanH, _, _, meanBL, _ = sample(n,start,end,f)
                    minH,maxH = minMaxHTable[(start,end,f,n)]
                    minBL,maxBL = minMaxBLTable[(start,end,f,n)]

                    if not minH <= meanH <= maxH:
                        error('unexpected mean height!')
                    if not minBL <= meanBL <= maxBL:
                        error('unexpected mean branch length!')
                    
    
    
