#!/bin/env python

from CoaSim import *
from CoaSim.popStructure import \
     Population as P, \
     Sample as S, \
     Growth as G

# this test is just a regression test -- I compare the simulated mean
# with previously simulated min and max

startValues = (0,0.5)
endValues   = (2,5,None)
betas       = (10,100,1000)
ns          = (5,10,20)
noSamples = 1000

# simulated data...
minMaxHTable = {(0.5, None, 10, 10): (0.30898330465805407, 0.94596259993083243), (0.5, None, 100, 20): (0.37502363889326229, 0.56981904023209773), (0, 5, 1000, 20): (0.0059360309101901048, 0.0090671343597407677), (0.5, 2, 10, 5): (0.19205250349738962, 0.96469754581543821), (0.5, 2, 1000, 20): (0.27783256380801369, 0.50887598344706941), (0.5, None, 1000, 20): (0.39024910361303589, 0.50919994782786993), (0, 5, 1000, 10): (0.0055720521755781285, 0.0091416976344493046), (0.5, None, 10, 5): (0.12180925654964474, 0.93018967606802838), (0, 5, 1000, 5): (0.0039417233823909551, 0.0088324897904106248), (0.5, 5, 1000, 5): (0.051524122957395536, 0.50939178785332906), (0.5, None, 1000, 10): (0.23563946388702467, 0.50891848172991061), (0, 5, 10, 20): (0.14533231320287776, 0.4367808873750586), (0.5, 2, 1000, 10): (0.25371885257887078, 0.50891614164209764), (0, None, 100, 20): (0.035258765371451485, 0.066885171391278836), (0.5, None, 100, 10): (0.25150558210849061, 0.56491195833108099), (0, None, 100, 10): (0.033946724594488269, 0.067979546008352834), (0.5, None, 100, 5): (0.11703787867232776, 0.56446631850894591), (0, 5, 10, 5): (0.078355509652597702, 0.44285906570753497), (0.5, None, 1000, 5): (0.12536255663035178, 0.50866288965658879), (0, 5, 10, 10): (0.13139158241206017, 0.43549620782486614), (0.5, 2, 100, 5): (0.11325057223843178, 0.57004153977313277), (0, None, 100, 5): (0.025062125066604143, 0.066185067264051683), (0.5, 5, 100, 5): (0.11240299985085379, 0.56366618835719862), (0, 2, 1000, 20): (0.0060132998543569616, 0.0090884152267656504), (0.5, 5, 10, 5): (0.11940303364214583, 0.92795478724666736), (0, None, 1000, 10): (0.0053300323262972776, 0.009142926163450419), (0, None, 1000, 5): (0.0045798858371501822, 0.0088116763137669387), (0.5, 5, 100, 10): (0.13160945015121955, 0.56479890359971363), (0.5, 2, 10, 10): (0.25130680154463458, 0.93539091142780262), (0, 2, 100, 20): (0.034951690379344931, 0.066888028935457366), (0.5, 5, 1000, 20): (0.33409444876648514, 0.50897929357273775), (0, 2, 100, 10): (0.032356120631170243, 0.067174593139812958), (0.5, 2, 10, 20): (0.24052334701020645, 0.95059618723067796), (0, 2, 1000, 5): (0.0048112204180858391, 0.0090162089709349118), (0.5, 2, 100, 20): (0.34254693725965718, 0.56491976244016961), (0.5, 5, 10, 10): (0.19700834686729785, 0.9499036654263624), (0, None, 1000, 20): (0.005869983042193461, 0.0090728237962721704), (0, 2, 1000, 10): (0.0057963469364949918, 0.0090885311471204863), (0, 2, 100, 5): (0.027562087254346938, 0.067492893067053777), (0, None, 10, 10): (0.099251015965403214, 0.44055276671979487), (0.5, 2, 100, 10): (0.22150058985417515, 0.56568155141383247), (0, 2, 10, 10): (0.12509225622045117, 0.42882140221224202), (0, 5, 100, 20): (0.035972446203060428, 0.066423743913354261), (0.5, 5, 10, 20): (0.29209142407347155, 0.94530338770774625), (0, 2, 10, 5): (0.083789744828558915, 0.43289263544284456), (0, None, 10, 5): (0.090812670126689643, 0.429121975623729), (0.5, 5, 1000, 10): (0.30725796347050355, 0.50891312441021219), (0.5, 2, 1000, 5): (0.046173896062220665, 0.50896199930212427), (0.5, None, 10, 20): (0.34049749543615632, 0.91743180110567168), (0, 5, 100, 10): (0.033866088831200972, 0.066510753651126825), (0, 5, 100, 5): (0.02559264997092222, 0.065667799116512438), (0, 2, 10, 20): (0.1350128780342402, 0.45767502057322801), (0, None, 10, 20): (0.14255875194633202, 0.43339916132636558), (0.5, 5, 100, 20): (0.37304875971816032, 0.56699304852181409)}

minMaxBLTable = {(0.5, None, 10, 10): (1.5281579241241117, 4.9883907438299113), (0.5, None, 100, 20): (2.1846325276068237, 5.7987594590128753), (0, 5, 1000, 20): (0.075762862528708466, 0.110088857030778), (0.5, 2, 10, 5): (0.59410276076916069, 3.7818182071575244), (0.5, 2, 1000, 20): (1.9185206888538751, 5.3386410417669214), (0.5, None, 1000, 20): (1.9980747871323179, 5.4038228071745502), (0, 5, 1000, 10): (0.041268933878443249, 0.063488888596229781), (0.5, None, 10, 5): (0.52203317924099157, 3.6500423860148206), (0, 5, 1000, 5): (0.015534076461469941, 0.037261451287431163), (0.5, 5, 1000, 5): (0.15689739972748226, 2.5352391616584735), (0.5, None, 1000, 10): (1.3740891738272254, 3.9886355039145251), (0, 5, 10, 20): (1.1871403144633961, 2.824315374703009), (0.5, 2, 1000, 10): (1.5076571655771431, 4.0275799760946898), (0, None, 100, 20): (0.38719320103492155, 0.64522661018337768), (0.5, None, 100, 10): (1.3338876089135834, 4.1146235274867937), (0, None, 100, 10): (0.21434732847197213, 0.39248517648465703), (0.5, None, 100, 5): (0.32124782468878588, 2.727895161827592), (0, 5, 10, 5): (0.27778214140202939, 1.5128379470077733), (0.5, None, 1000, 5): (0.39294567709138173, 2.5328020747996463), (0, 5, 10, 10): (0.74285706203181001, 1.9539142370063789), (0.5, 2, 100, 5): (0.38184910056218685, 2.7175494681214203), (0, None, 100, 5): (0.097659410922179474, 0.26515929836106539), (0.5, 5, 100, 5): (0.38607058784855458, 2.7202055561310443), (0, 2, 1000, 20): (0.076373339787959751, 0.1099425710406618), (0.5, 5, 10, 5): (0.32844543426886186, 3.7003120102857103), (0, None, 1000, 10): (0.039799392492068458, 0.065662863124429885), (0, None, 1000, 5): (0.018175904662991134, 0.037232129650321334), (0.5, 5, 100, 10): (0.70885164668879674, 4.0328232173670182), (0.5, 2, 10, 10): (1.313166927448874, 5.2716597272401664), (0, 2, 100, 20): (0.39345847561271879, 0.62123092829615334), (0.5, 5, 1000, 20): (2.3267289672591338, 5.2695493674490015), (0, 2, 100, 10): (0.22005143544591305, 0.40087986434658296), (0.5, 2, 10, 20): (2.1170267946009877, 6.2155328206998943), (0, 2, 1000, 5): (0.020019165249671997, 0.036308753744614487), (0.5, 2, 100, 20): (2.1690480001796, 5.505392384451179), (0.5, 5, 10, 10): (0.9107873181440278, 5.2427028978165806), (0, None, 1000, 20): (0.073753989419188315, 0.10790886481231173), (0, 2, 1000, 10): (0.037439371621108816, 0.06490788794090524), (0, 2, 100, 5): (0.097266706888025925, 0.25465394825637422), (0, None, 10, 10): (0.64836745795007467, 2.0105507097251816), (0.5, 2, 100, 10): (0.91382082309679324, 4.0055957464821139), (0, 2, 10, 10): (0.70098368905199915, 1.9947760664521323), (0, 5, 100, 20): (0.37976107301196593, 0.63248724877659745), (0.5, 5, 10, 20): (2.0727452190659981, 7.0955736164609764), (0, 2, 10, 5): (0.309532522942364, 1.5055749858150613), (0, None, 10, 5): (0.26896041612541632, 1.5336844947710087), (0.5, 5, 1000, 10): (1.1923786378778922, 3.9196803843755923), (0.5, 2, 1000, 5): (0.16009366723344051, 2.5320080711358877), (0.5, None, 10, 20): (2.5421121418525248, 6.3992709885677801), (0, 5, 100, 10): (0.19618069386610279, 0.41965741851066812), (0, 5, 100, 5): (0.095929004161465936, 0.26523535294848288), (0, 2, 10, 20): (1.2843429818859873, 2.5927443978982398), (0, None, 10, 20): (1.2666687557179634, 2.6822650901128529), (0.5, 5, 100, 20): (2.4145563429733077, 5.3037152518803321)}



def sample(n, start, end, beta):
    minH  = 10000 ; maxH  = -1
    minBL = 10000 ; maxBL = -1
    heights = [] ; lengths = []
    for i in xrange(noSamples):
        arg = simulate([],P(1,S(n),epochs=[G(beta,start,end)]),
                       keepEmptyIntervals=True)
        tree = arg.intervals[0].tree
        heights.append(tree.height)
        lengths.append(tree.branchLength)
        if minH > tree.height: minH = tree.height
        if maxH < tree.height: maxH = tree.height
        if minBL > tree.branchLength: minBL = tree.branchLength
        if maxBL < tree.branchLength: maxBL = tree.branchLength
    meanH = sum(heights)/noSamples
    meanBL = sum(lengths)/noSamples
    return minH, meanH, maxH, minBL, meanBL, maxBL


import sys
if len(sys.argv) >= 2 and sys.argv[1] == '--sample':
    minMaxHTable = dict()
    minMaxBLTable = dict()
    for start in startValues:
        for end in endValues:
            for beta in betas:
                for n in ns:
                    minH, _, maxH, minBL, _, maxBL = sample(n,start,end,beta)
                    minMaxHTable[(start,end,beta,n)] = minH,maxH
                    minMaxBLTable[(start,end,beta,n)] = minBL,maxBL
    print >> open('minMaxHTable.py','w'), 'minMaxHTable =', minMaxHTable
    print >> open('minMaxBLTable.py','w'), 'minMaxBLTable =', minMaxBLTable

else:


    noErrors = 0
    def error(s):
        global noErrors
        print s
        noErrors += 1

    # the test...
    for start in startValues:
        for end in endValues:
            for beta in betas:
                for n in ns:
                    _, meanH, _, _, meanBL, _ = sample(n,start,end,beta)
                    minH,maxH = minMaxHTable[(start,end,beta,n)]
                    minBL,maxBL = minMaxBLTable[(start,end,beta,n)]

                    if not minH <= meanH <= maxH:
                        error('unexpected mean height!')
                    if not minBL <= meanBL <= maxBL:
                        error('unexpected mean branch length!')
                    
    
    
